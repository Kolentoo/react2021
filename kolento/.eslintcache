[{"W:\\Kolento\\REACT2021\\kolento\\src\\index.js":"1","W:\\Kolento\\REACT2021\\kolento\\src\\kolento.js":"2","W:\\Kolento\\REACT2021\\kolento\\src\\test.js":"3","W:\\Kolento\\REACT2021\\kolento\\src\\reportWebVitals.js":"4","W:\\Kolento\\REACT2021\\kolento\\src\\App.js":"5","W:\\Kolento\\REACT2021\\kolento\\src\\store\\index.js":"6","W:\\Kolento\\REACT2021\\kolento\\src\\store\\reducer.js":"7","W:\\Kolento\\REACT2021\\kolento\\src\\store\\action.js":"8"},{"size":1114,"mtime":1610457429472,"results":"9","hashOfConfig":"10"},{"size":562,"mtime":1610457763019,"results":"11","hashOfConfig":"10"},{"size":585,"mtime":1610457429481,"results":"12","hashOfConfig":"10"},{"size":375,"mtime":1610457429476,"results":"13","hashOfConfig":"10"},{"size":11208,"mtime":1610458898227,"results":"14","hashOfConfig":"10"},{"size":273,"mtime":1610457429479,"results":"15","hashOfConfig":"10"},{"size":991,"mtime":1610458219144,"results":"16","hashOfConfig":"10"},{"size":449,"mtime":1610458228416,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1qxyxa7",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"W:\\Kolento\\REACT2021\\kolento\\src\\index.js",[],"W:\\Kolento\\REACT2021\\kolento\\src\\kolento.js",[],["36","37"],"W:\\Kolento\\REACT2021\\kolento\\src\\test.js",[],"W:\\Kolento\\REACT2021\\kolento\\src\\reportWebVitals.js",[],"W:\\Kolento\\REACT2021\\kolento\\src\\App.js",["38","39","40","41","42","43","44","45","46"],"import logo from './logo.svg';\r\nimport React,{Component,Fragment} from 'react'\r\nimport './App.css';\r\nimport PT from \"prop-types\";\r\nimport life from '../src/images/life.jpg';\r\nimport store from '../src/store/index.js'\r\nimport {changeValue,submitValue,delValue} from './store/action'\r\n\r\n// function App() {\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <header className=\"App-header\">\r\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n//         <p>\r\n//           Edit <code>src/App.js</code> and save to reload.\r\n//         </p>\r\n//         <a\r\n//           className=\"App-link\"\r\n//           href=\"https://reactjs.org\"\r\n//           target=\"_blank\"\r\n//           rel=\"noopener noreferrer\"\r\n//         >\r\n//           Learn React\r\n//         </a>\r\n//       </header>\r\n//     </div>\r\n//   );\r\n// }\r\n// 设置默认值\r\n\r\nconst ThemeContext = React.createContext('light');\r\nclass Study extends Component{\r\n  constructor(props){\r\n    super(props)\r\n  }\r\n  render(){\r\n    return(\r\n      <div className=\"study\">\r\n        <img src={life} alt=\"\"/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass AddItem extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      value:''\r\n    }\r\n  }\r\n  render(){\r\n    return (\r\n      <div className=\"add-box\">\r\n        <input type=\"text\" placeholder=\"add item\" value={this.state.value} onChange={this.changeValue} onKeyUp={this.enterAdd} />\r\n        <button onClick={this.add}>add</button>\r\n        <button onClick={this.clear}>clear</button>\r\n      </div>\r\n    )\r\n  }\r\n  componentDidMount(){\r\n    this.props.onRef(this);\r\n  }\r\n  changeValue=(e)=>{\r\n    console.log('输入的值',e.target.value)\r\n    this.setState({\r\n      value:e.target.value\r\n    })\r\n  }\r\n  add=()=>{\r\n    console.log('add item')\r\n    let time = new Date().toLocaleDateString();\r\n    this.props.addContent(this.state.value,time);\r\n    this.setState({\r\n      value:''\r\n    })\r\n  }\r\n  enterAdd=(e)=>{\r\n    if(e.keyCode==13){\r\n      console.log('键盘回车添加')\r\n      this.add();\r\n    }\r\n  }\r\n  clear=()=>{\r\n    console.log('clear')\r\n    this.setState({\r\n      value:''\r\n    })\r\n  }\r\n}\r\n\r\nclass List extends Component{\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n  render(){\r\n    return(\r\n      <div className=\"box\">\r\n        <div className=\"list-item\">\r\n          <input className=\"choose\" checked={this.props.current.check} type=\"checkbox\" onChange={this.changeCheck}/>\r\n          <span className=\"index\">{this.props.idx+1}</span>\r\n          <span className=\"content\">{this.props.current.content}</span>\r\n          <span className=\"time\">{this.props.current.time}</span>\r\n          <span className={this.props.current.status=='working'?'blue':'orange'} onClick={this.changeStatus}>{this.props.current.status}</span>\r\n          <span>是否选中 {this.props.current.check.toString()}</span>\r\n          <span className=\"del\" onClick={this.del} style={{'color':'red'}}>delete</span>\r\n        </div>\r\n      </div>\r\n\r\n\r\n    )\r\n  }\r\n  changeStatus=()=>{\r\n    \r\n    this.props.changeType(this.props.current,this.props.idx);\r\n  }\r\n  del=()=>{\r\n    console.log('当前的文本内容',this.props.current.content)\r\n    this.props.deleteItem(this.props.current.content);\r\n  }\r\n  changeCheck=(e)=>{\r\n    this.props.changeCheck(!this.props.current.check,this.props.idx);\r\n    console.log('checkbox操作',!this.props.current);\r\n    \r\n  }\r\n}\r\n\r\nclass Father extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"father\">\r\n        父亲组件\r\n        <Son></Son>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass Son extends Component{\r\n  static contextType = ThemeContext;\r\n  render(){\r\n    return(\r\n      <div className=\"son\">\r\n        子孙组件:{this.context}\r\n        <ThemeContext.Consumer>\r\n          {value=>(\r\n            <p>通过context的consumer渲染出来的{value}</p>\r\n          )}\r\n        </ThemeContext.Consumer>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass App extends Component{\r\n  constructor(props){\r\n    console.log('----Mounting阶段开始----')\r\n    console.log('首先执行构造函数，作用：获取props参数和初始化组件内的state状态值')\r\n    super(props);\r\n    this.state={\r\n      itemBox:[\r\n        {check:false,content:'codeing',status:'finished',time:'2020/01/07'},\r\n        {check:true,content:'writing',status:'finished',time:'2020/01/07'},\r\n        {check:false,content:'learning',status:'finished',time:'2020/01/07'},\r\n        {check:true,content:'playing',status:'finished',time:'2020/01/07'},\r\n      ],\r\n      choosen:0,\r\n      reduxBox:store.getState(),\r\n      reduxValue:''\r\n    }\r\n    store.subscribe(this.changeStore);\r\n  }\r\n  componentWillMount(){\r\n    console.log('componentWillMount：在页面被渲染前、组件被挂载到页面之前调用，在render之前被调用，因此在这里更改状态state将不会触发重新渲染,componentWillMount只执行一次');\r\n    console.log('注意：1.此时不能获取页面中的dom对象。2.可以调用setState来改变状态值。3.可以发送异步请求')\r\n  }\r\n  render(){\r\n    console.log('render钩子 作用：渲染组件到页面中，不能在render方法中setState，会导致递归渲染，此时获取不到dom');\r\n    console.log('this.state.reduxBox',this.state.reduxBox)\r\n    return(\r\n      <>\r\n        <div className=\"app\">\r\n          <ThemeContext.Provider value=\"dark\">\r\n            <Father></Father>\r\n          </ThemeContext.Provider>\r\n          <button onClick={this.useChild}>父调用子方法</button>\r\n          <AddItem addContent={this.addContent} onRef={this.onRef}></AddItem>\r\n          {this.state.itemBox.map((current,idx)=>{\r\n            return <List key={idx} idx={idx} current={current} changeType={this.changeType} \r\n            deleteItem={this.deleteItem} changeCheck={this.changeCheck}></List>\r\n          })}\r\n          <div className=\"total-box\">\r\n            <span className=\"num\" style={{'margin':'0 15px'}}>总共有{this.state.itemBox.length}条数据</span>\r\n            <span className=\"choosen\">当前选中{this.state.choosen}条</span>\r\n          </div>\r\n          <div className=\"redux-demo\">\r\n            <div className=\"input-box\">\r\n              <input type=\"text\" placeholder=\"测试redux\" value={this.state.reduxBox.inputVal} onChange={this.changeRedux}/>\r\n              <button onClick={this.addRedux}>加入到redux中</button>\r\n            </div>\r\n            <ul className=\"content\">\r\n              {this.state.reduxBox.list.length>0?this.state.reduxBox.list.map((cur,idx)=>{\r\n                return <li className=\"redux-list\" key={idx} onClick={this.delRedux}>{cur}</li>\r\n              }):''}\r\n            </ul>\r\n            \r\n          </div>\r\n          <Study></Study>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n  componentDidMount(){\r\n    console.log('在页面第一次被渲染后调用,componentDidMount只执行一次')\r\n    console.log(\r\n      `\r\n      此时组件已经挂载到页面中，可以进行dom操作获取dom对象,可以发送请求获取数据\r\n      可以setState修改状态值。此时修改state会重新渲染页面\r\n      ----Mounting阶段结束----\r\n      `\r\n    )\r\n    this.chooseLength();\r\n  }\r\n  componentWillReciveProps(){\r\n    console.log('----Updating阶段开始----')\r\n    console.log(\r\n      `\r\n      componentWillReciveProps：\r\n      在组件接收到一个新的 prop (更新后)时被调用,每当组件的porps或state改变时会调用。这个方法在初始化render时不会被调用。\r\n      组件在接收到新的props时会调用，参数：当前组件的props值，可以通过this.props获取上一次的值，修改state不会触发这个方法。\r\n      `\r\n    )\r\n  }\r\n  shouldComponentUpdate(){\r\n    console.log(`\r\n    shouldComponentUpdate:\r\n    在组件接收到新的props或者state时被调用。在初始化时或者使用forceUpdate时不被调用\r\n    这个方法最终必须要返回一个布尔值，返回true页面重新渲染执行render。false则不渲染，render不执行。\r\n    优势：可以通过条件决定是否渲染组件，降低渲染频率\r\n    `)\r\n    return true\r\n  }\r\n  componentWillUpdate(nextProps,nextState){\r\n    console.log(`\r\n    componentWillUpdate:\r\n    在组件接收到新的props或者state但还没有render时被调用。在初始化时不会被调用。\r\n    参数：最新的属性和状态，不能修改state会导致递归渲染。\r\n    `)\r\n    console.log('componentWillUpdate结束后执行render渲染视图')\r\n  }\r\n  componentDidUpdate(prevProps,prevState){\r\n    console.log(`\r\n    在组件完成更新后立即调用。在初始化时不会被调用\r\n    此时组件已经更新\r\n    参数:旧的属性和状态`\r\n    )\r\n  }\r\n  componentWillUnmount(){\r\n    console.log('----Unmounting进入写在阶段----')\r\n    console.log(`在组件从 DOM 中移除之前立刻被调用、组件写在前可以用做一些清理操作，清楚定时器、创建的dom`)\r\n  }\r\n  onRef = (ref) => {\r\n    console.log('ref',ref);\r\n    console.log('次此处获取的ref为addItem组件，这个组件复制给另一个Additem，然后可以调用里面的方法')\r\n    this.AddItem = ref\r\n  }\r\n  changeRedux=(e)=>{\r\n    let reduxChangeValue = changeValue(e.target.value);\r\n    store.dispatch(reduxChangeValue);\r\n  }\r\n  addRedux=()=>{\r\n    console.log('加入redux');\r\n    let value=this.state.reduxBox.inputVal;\r\n    let reduxSubmitValue = submitValue(value);\r\n    store.dispatch(reduxSubmitValue); \r\n  }\r\n  delRedux=(index)=>{\r\n    console.log('删除redux');\r\n    let value=index;\r\n    let reduxDelValue = delValue(value);\r\n    store.dispatch(reduxDelValue); \r\n  }\r\n  changeStore=()=>{\r\n    this.setState({\r\n      reduxBox:store.getState()\r\n    });\r\n  }\r\n  useChild=()=>{\r\n    this.AddItem.clear();\r\n  }\r\n\r\n  addContent=(item,time)=>{\r\n    console.log('item,time',item,time)\r\n    this.setState({\r\n      itemBox:[...this.state.itemBox,{content:item,time:time,status:'working',check:false,}]\r\n    },()=>{\r\n      console.log('itemBox',this.state.itemBox);\r\n    })\r\n  }\r\n  changeType=(currentItem,index)=>{\r\n    const itemBox = [...this.state.itemBox];\r\n    this.setState({\r\n      itemBox:itemBox.map((current,key)=>{\r\n        if(key==index){\r\n          if(current.status=='working'){\r\n            return {...current,status:'finished'}\r\n          }else{\r\n            return {...current,status:'working'}\r\n          } \r\n        }else{\r\n          return current;\r\n        }\r\n        \r\n      })\r\n    })\r\n    \r\n  }\r\n  deleteItem=(content)=>{\r\n    this.setState(state=>{\r\n      return{\r\n        itemBox:state.itemBox.filter(current=>{\r\n          return current.content!==content\r\n        })\r\n      }\r\n    })\r\n\r\n  }\r\n  changeCheck=(result,idx)=>{\r\n    console.log('传过来的check值',result)\r\n    const itemBox = [...this.state.itemBox];\r\n    this.setState({\r\n      itemBox:itemBox.map((current,key)=>{\r\n        if(key==idx){\r\n          return {...current,check:result} \r\n        }else{\r\n          return current;\r\n        }\r\n      })\r\n    },()=>{\r\n      this.chooseLength();\r\n    })\r\n  }\r\n  chooseLength=()=>{\r\n    let choosen = this.state.itemBox.filter(current=>{\r\n      return current.check\r\n    })\r\n    this.setState({\r\n      choosen:choosen.length\r\n    })\r\n  }\r\n}\r\n\r\nexport default App;\r\n","W:\\Kolento\\REACT2021\\kolento\\src\\store\\index.js",[],"W:\\Kolento\\REACT2021\\kolento\\src\\store\\reducer.js",["47"],"W:\\Kolento\\REACT2021\\kolento\\src\\store\\action.js",[],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":1,"column":8,"nodeType":"54","messageId":"55","endLine":1,"endColumn":12},{"ruleId":"52","severity":1,"message":"56","line":4,"column":8,"nodeType":"54","messageId":"55","endLine":4,"endColumn":10},{"ruleId":"57","severity":1,"message":"58","line":33,"column":3,"nodeType":"59","messageId":"60","endLine":35,"endColumn":4},{"ruleId":"61","severity":1,"message":"62","line":79,"column":17,"nodeType":"63","messageId":"64","endLine":79,"endColumn":19},{"ruleId":"57","severity":1,"message":"58","line":93,"column":3,"nodeType":"59","messageId":"60","endLine":95,"endColumn":4},{"ruleId":"61","severity":1,"message":"62","line":104,"column":53,"nodeType":"63","messageId":"64","endLine":104,"endColumn":55},{"ruleId":"61","severity":1,"message":"62","line":304,"column":15,"nodeType":"63","messageId":"64","endLine":304,"endColumn":17},{"ruleId":"61","severity":1,"message":"62","line":305,"column":28,"nodeType":"63","messageId":"64","endLine":305,"endColumn":30},{"ruleId":"61","severity":1,"message":"62","line":333,"column":15,"nodeType":"63","messageId":"64","endLine":333,"endColumn":17},{"ruleId":"65","severity":1,"message":"66","line":10,"column":1,"nodeType":"67","endLine":27,"endColumn":2},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'PT' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]