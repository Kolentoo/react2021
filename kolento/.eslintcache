[{"D:\\Kolento\\react2021\\kolento\\src\\index.js":"1","D:\\Kolento\\react2021\\kolento\\src\\reportWebVitals.js":"2","D:\\Kolento\\react2021\\kolento\\src\\App.js":"3","D:\\Kolento\\react2021\\kolento\\src\\test.js":"4","D:\\Kolento\\react2021\\kolento\\src\\kolento.js":"5","D:\\Kolento\\react2021\\kolento\\src\\store\\index.js":"6","D:\\Kolento\\react2021\\kolento\\src\\store\\reducer.js":"7"},{"size":1080,"mtime":1610096302724,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"9"},{"size":10902,"mtime":1610099787549,"results":"11","hashOfConfig":"9"},{"size":585,"mtime":1610093962655,"results":"12","hashOfConfig":"9"},{"size":562,"mtime":1610093820325,"results":"13","hashOfConfig":"9"},{"size":273,"mtime":1610097886793,"results":"14","hashOfConfig":"9"},{"size":1015,"mtime":1610098160291,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"18el4op",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","errorCount":1,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},"D:\\Kolento\\react2021\\kolento\\src\\index.js",[],"D:\\Kolento\\react2021\\kolento\\src\\reportWebVitals.js",[],["33","34"],"D:\\Kolento\\react2021\\kolento\\src\\App.js",["35","36","37","38","39","40","41","42","43","44","45"],"import logo from './logo.svg';\nimport React,{Component,Fragment} from 'react'\nimport './App.css';\nimport PT from \"prop-types\";\nimport life from '../src/images/life.jpg';\nimport store from '../src/store/index.js'\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n// 设置默认值\n\nconst ThemeContext = React.createContext('light');\nclass Study extends Component{\n  constructor(props){\n    super(props)\n  }\n  render(){\n    return(\n      <div className=\"study\">\n        <img src={life} alt=\"\"/>\n      </div>\n    )\n  }\n}\n\nclass AddItem extends Component{\n  constructor(props){\n    super(props);\n    this.state={\n      value:''\n    }\n  }\n  render(){\n    return (\n      <div className=\"add-box\">\n        <input type=\"text\" placeholder=\"add item\" value={this.state.value} onChange={this.changeValue} onKeyUp={this.enterAdd} />\n        <button onClick={this.add}>add</button>\n        <button onClick={this.clear}>clear</button>\n      </div>\n    )\n  }\n  componentDidMount(){\n    this.props.onRef(this);\n  }\n  changeValue=(e)=>{\n    console.log('输入的值',e.target.value)\n    this.setState({\n      value:e.target.value\n    })\n  }\n  add=()=>{\n    console.log('add item')\n    let time = new Date().toLocaleDateString();\n    this.props.addContent(this.state.value,time);\n    this.setState({\n      value:''\n    })\n  }\n  enterAdd=(e)=>{\n    if(e.keyCode==13){\n      console.log('键盘回车添加')\n      this.add();\n    }\n  }\n  clear=()=>{\n    console.log('clear')\n    this.setState({\n      value:''\n    })\n  }\n}\n\nclass List extends Component{\n  constructor(props){\n    super(props);\n  }\n  render(){\n    return(\n      <div className=\"box\">\n        <div className=\"list-item\">\n          <input className=\"choose\" checked={this.props.current.check} type=\"checkbox\" onChange={this.changeCheck}/>\n          <span className=\"index\">{this.props.idx+1}</span>\n          <span className=\"content\">{this.props.current.content}</span>\n          <span className=\"time\">{this.props.current.time}</span>\n          <span className={this.props.current.status=='working'?'blue':'orange'} onClick={this.changeStatus}>{this.props.current.status}</span>\n          <span>是否选中 {this.props.current.check.toString()}</span>\n          <span className=\"del\" onClick={this.del} style={{'color':'red'}}>delete</span>\n        </div>\n      </div>\n\n\n    )\n  }\n  changeStatus=()=>{\n    \n    this.props.changeType(this.props.current,this.props.idx);\n  }\n  del=()=>{\n    console.log('当前的文本内容',this.props.current.content)\n    this.props.deleteItem(this.props.current.content);\n  }\n  changeCheck=(e)=>{\n    this.props.changeCheck(!this.props.current.check,this.props.idx);\n    console.log('checkbox操作',!this.props.current);\n    \n  }\n}\n\nclass Father extends Component{\n  render(){\n    return(\n      <div className=\"father\">\n        父亲组件\n        <Son></Son>\n      </div>\n    )\n  }\n}\n\nclass Son extends Component{\n  static contextType = ThemeContext;\n  render(){\n    return(\n      <div className=\"son\">\n        子孙组件:{this.context}\n        <ThemeContext.Consumer>\n          {value=>(\n            <p>通过context的consumer渲染出来的{value}</p>\n          )}\n        </ThemeContext.Consumer>\n      </div>\n    )\n  }\n}\n\nclass App extends Component{\n  constructor(props){\n    console.log('----Mounting阶段开始----')\n    console.log('首先执行构造函数，作用：获取props参数和初始化组件内的state状态值')\n    super(props);\n    this.state={\n      itemBox:[\n        {check:false,content:'codeing',status:'finished',time:'2020/01/07'},\n        {check:true,content:'writing',status:'finished',time:'2020/01/07'},\n        {check:false,content:'learning',status:'finished',time:'2020/01/07'},\n        {check:true,content:'playing',status:'finished',time:'2020/01/07'},\n      ],\n      choosen:0,\n      reduxBox:store.getState(),\n      reduxValue:''\n    },\n    store.subscribe(this.changeStore);\n  }\n  componentWillMount(){\n    console.log('componentWillMount：在页面被渲染前、组件被挂载到页面之前调用，在render之前被调用，因此在这里更改状态state将不会触发重新渲染,componentWillMount只执行一次');\n    console.log('注意：1.此时不能获取页面中的dom对象。2.可以调用setState来改变状态值。3.可以发送异步请求')\n  }\n  render(){\n    console.log('render钩子 作用：渲染组件到页面中，不能在render方法中setState，会导致递归渲染，此时获取不到dom');\n    console.log('this.state.reduxBox',this.state.reduxBox)\n    return(\n      <>\n        <div className=\"app\">\n          <ThemeContext.Provider value=\"dark\">\n            <Father></Father>\n          </ThemeContext.Provider>\n          <button onClick={this.useChild}>父调用子方法</button>\n          <AddItem addContent={this.addContent} onRef={this.onRef}></AddItem>\n          {this.state.itemBox.map((current,idx)=>{\n            return <List key={idx} idx={idx} current={current} changeType={this.changeType} \n            deleteItem={this.deleteItem} changeCheck={this.changeCheck}></List>\n          })}\n          <div className=\"total-box\">\n            <span className=\"num\" style={{'margin':'0 15px'}}>总共有{this.state.itemBox.length}条数据</span>\n            <span className=\"choosen\">当前选中{this.state.choosen}条</span>\n          </div>\n          <div className=\"redux-demo\">\n            <div className=\"input-box\">\n              <input type=\"text\" placeholder=\"测试redux\" value={this.state.reduxBox.inputVal} onChange={this.changeRedux}/>\n              <button onClick={this.addRedux}>加入到redux中</button>\n            </div>\n            <ul className=\"content\">\n              {this.state.reduxBox.list.length>0?this.state.reduxBox.list.map((cur,idx)=>{\n                return <li className=\"redux-list\" key={idx} onClick={this.delRedux}>{cur}</li>\n              }):''}\n            </ul>\n            \n          </div>\n          <Study></Study>\n        </div>\n      </>\n    )\n  }\n  componentDidMount(){\n    console.log('在页面第一次被渲染后调用,componentDidMount只执行一次')\n    console.log(\n      `\n      此时组件已经挂载到页面中，可以进行dom操作获取dom对象,可以发送请求获取数据\n      可以setState修改状态值。此时修改state会重新渲染页面\n      ----Mounting阶段结束----\n      `\n    )\n    this.chooseLength();\n  }\n  componentWillReciveProps(){\n    console.log('----Updating阶段开始----')\n    console.log(\n      `\n      componentWillReciveProps：\n      在组件接收到一个新的 prop (更新后)时被调用,每当组件的porps或state改变时会调用。这个方法在初始化render时不会被调用。\n      组件在接收到新的props时会调用，参数：当前组件的props值，可以通过this.props获取上一次的值，修改state不会触发这个方法。\n      `\n    )\n  }\n  shouldComponentUpdate(){\n    console.log(`\n    shouldComponentUpdate:\n    在组件接收到新的props或者state时被调用。在初始化时或者使用forceUpdate时不被调用\n    这个方法最终必须要返回一个布尔值，返回true页面重新渲染执行render。false则不渲染，render不执行。\n    优势：可以通过条件决定是否渲染组件，降低渲染频率\n    `)\n    return true\n  }\n  componentWillUpdate(nextProps,nextState){\n    console.log(`\n    componentWillUpdate:\n    在组件接收到新的props或者state但还没有render时被调用。在初始化时不会被调用。\n    参数：最新的属性和状态，不能修改state会导致递归渲染。\n    `)\n    console.log('componentWillUpdate结束后执行render渲染视图')\n  }\n  componentDidUpdate(prevProps,prevState){\n    console.log(`\n    在组件完成更新后立即调用。在初始化时不会被调用\n    此时组件已经更新\n    参数:旧的属性和状态`\n    )\n  }\n  componentWillUnmount(){\n    console.log('----Unmounting进入写在阶段----')\n    console.log(`在组件从 DOM 中移除之前立刻被调用、组件写在前可以用做一些清理操作，清楚定时器、创建的dom`)\n  }\n  onRef = (ref) => {\n    console.log('ref',ref);\n    console.log('次此处获取的ref为addItem组件，这个组件复制给另一个Additem，然后可以调用里面的方法')\n    this.AddItem = ref\n  }\n  changeRedux=(e)=>{\n    // this.setState({\n    //   reduxValue:e.target.value\n    // })\n    let action={\n      type:\"input_change_value\",\n      value:e.target.value\n    }\n    store.dispatch(action);\n  }\n  addRedux=()=>{\n    console.log('加入redux');\n    let value=this.state.reduxBox.inputVal;\n    let action={\n        type:\"input_submit_value\",\n        value\n    }\n    store.dispatch(action); \n  }\n  delRedux=(index)=>{\n    // let value=index;\n    // let action={\n    //     type:\"input_delete_value\",\n    //     value\n    // }\n    // store.dispatch(action); \n  }\n  changeStore=()=>{\n    this.setState({\n      reduxBox:store.getState()\n    });\n  }\n  useChild=()=>{\n    this.AddItem.clear();\n  }\n\n  addContent=(item,time)=>{\n    console.log('item,time',item,time)\n    this.setState({\n      itemBox:[...this.state.itemBox,{content:item,time:time,status:'working',check:false,}]\n    },()=>{\n      console.log('itemBox',this.state.itemBox);\n    })\n  }\n  changeType=(currentItem,index)=>{\n    const itemBox = [...this.state.itemBox];\n    this.setState({\n      itemBox:itemBox.map((current,key)=>{\n        if(key==index){\n          if(current.status=='working'){\n            return {...current,status:'finished'}\n          }else{\n            return {...current,status:'working'}\n          } \n        }else{\n          return current;\n        }\n        \n      })\n    })\n    \n  }\n  deleteItem=(content)=>{\n    this.setState(state=>{\n      return{\n        itemBox:state.itemBox.filter(current=>{\n          return current.content!==content\n        })\n      }\n    })\n\n  }\n  changeCheck=(result,idx)=>{\n    console.log('传过来的check值',result)\n    const itemBox = [...this.state.itemBox];\n    this.setState({\n      itemBox:itemBox.map((current,key)=>{\n        if(key==idx){\n          return {...current,check:result} \n        }else{\n          return current;\n        }\n      })\n    },()=>{\n      this.chooseLength();\n    })\n  }\n  chooseLength=()=>{\n    let choosen = this.state.itemBox.filter(current=>{\n      return current.check\n    })\n    this.setState({\n      choosen:choosen.length\n    })\n  }\n}\n\nexport default App;\n","D:\\Kolento\\react2021\\kolento\\src\\test.js",[],"D:\\Kolento\\react2021\\kolento\\src\\kolento.js",[],"D:\\Kolento\\react2021\\kolento\\src\\store\\index.js",[],"D:\\Kolento\\react2021\\kolento\\src\\store\\reducer.js",["46"],"// recuder\r\n// 可以获取到store里面的数据，但是不能直接对数据进行修改\r\n// 只能对拷贝后的数据进行修改，最后返回给store\r\n// 原始信息\r\nlet defaultState={\r\n  inputVal:'',\r\n  list:[\"塞尔达传说-旷野之息\",\"马里奥奥德赛\",\"精灵宝可梦剑盾\",\"异度之刃\"]\r\n}\r\n\r\nexport default(state=defaultState,action)=>{\r\n  // state是返回提交上去的信息，提交告知修改哪里的数据\r\n  if(action.type===\"input_change_value\"){\r\n      let newState=JSON.parse(JSON.stringify(state));\r\n      newState.inputVal=action.value;\r\n      return newState;\r\n  }else if(action.type===\"input_submit_value\"){\r\n      let newState=JSON.parse(JSON.stringify(state));\r\n      newState.inputVal=\"\";\r\n      newState.list.push(action.value);\r\n      return newState;        \r\n  }else if(action.type===\"input_delete_value\"){\r\n      let newState=JSON.parse(JSON.stringify(state));\r\n      newState.list.splice(action.value,1);\r\n      return newState;        \r\n  }\r\n  return state;\r\n}",{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":1,"column":8,"nodeType":"53","messageId":"54","endLine":1,"endColumn":12},{"ruleId":"51","severity":1,"message":"55","line":4,"column":8,"nodeType":"53","messageId":"54","endLine":4,"endColumn":10},{"ruleId":"56","severity":1,"message":"57","line":32,"column":3,"nodeType":"58","messageId":"59","endLine":34,"endColumn":4},{"ruleId":"60","severity":1,"message":"61","line":78,"column":17,"nodeType":"62","messageId":"63","endLine":78,"endColumn":19},{"ruleId":"56","severity":1,"message":"57","line":92,"column":3,"nodeType":"58","messageId":"59","endLine":94,"endColumn":4},{"ruleId":"60","severity":1,"message":"61","line":103,"column":53,"nodeType":"62","messageId":"63","endLine":103,"endColumn":55},{"ruleId":"64","severity":2,"message":"65","line":159,"column":5,"nodeType":"66","messageId":"67","endLine":170,"endColumn":39},{"ruleId":"68","severity":1,"message":"69","line":169,"column":6,"nodeType":"70","messageId":"71","endLine":169,"endColumn":7},{"ruleId":"60","severity":1,"message":"61","line":314,"column":15,"nodeType":"62","messageId":"63","endLine":314,"endColumn":17},{"ruleId":"60","severity":1,"message":"61","line":315,"column":28,"nodeType":"62","messageId":"63","endLine":315,"endColumn":30},{"ruleId":"60","severity":1,"message":"61","line":343,"column":15,"nodeType":"62","messageId":"63","endLine":343,"endColumn":17},{"ruleId":"72","severity":1,"message":"73","line":10,"column":1,"nodeType":"74","endLine":27,"endColumn":2},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'PT' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-expressions","Expected an assignment or function call and instead saw an expression.","ExpressionStatement","unusedExpression","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]